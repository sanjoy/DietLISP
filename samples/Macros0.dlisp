;; Tests the macro facilities
;; RUN: ../dlisp <file>

(defun do-cond (ast)
  (if (nullp ast)
      null
      (let ((current (head ast))
            (rest (tail ast))
            (condition (head current))
            (then (head (tail current))))
        (list (sym if)
         condition then (do-cond rest)))))
;; EXPECT: 'do-cond

(defmacro cond ast (do-cond ast))
;; EXPECT: 'cond

(defun cond-test (x)
  (cond
    ((> x 0) 2)
    ((== x 0) 1)
    ((< x 0) 0)))
;; EXPECT: 'cond-test

(cond-test 5)
;; EXPECT: 2
(cond-test 0)
;; EXPECT: 1
(cond-test (- 0 5))
;; EXPECT: 0

(defun make-make-adder-macro (n)
  (macro ast
         (list (sym lambda)
          (list (sym x))
          (list
           (sym +) n (head ast) (sym x)))))
;; EXPECT: 'make-make-adder-macro

(let ((x (make-make-adder-macro 5)))
  (let ((fifteen-adder (x (+ 10))))
    (fifteen-adder 42)))
;; EXPECT: 57
