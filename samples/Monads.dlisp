;; A basic framework for monadic programming
;; RUN: ../dlisp <file>

(defun form-expression (bind-fn stmts)
  (if (nullp (tail stmts))
      (head stmts)
      (let ((current (head stmts))
            (rest (tail stmts))
            (var (if (== (sym set) (head current))
                     (head (tail current))
                     (sym _)))
            (expression (if (== (sym set)
                                (head current))
                            (head (tail (tail current)))
                            current)))
        (list bind-fn expression (list (sym lambda)
                                       (list var)
                                       (form-expression bind-fn rest))))))
;; EXPECT: ()

(defmacro do
    (let ((bind-fn (head ast))
          (stmts (tail ast)))
      (form-expression bind-fn stmts)))
;; EXPECT: ()

(defun bind-1 (a b)
  (b a))
;; EXPECT: ()

(do bind-1
    (set a 5)
    (+ a 0))
;; EXPECT: 5

(defun maybe-bind (a b)
  (if (nullp a)
      false
      (b a)))
;; EXPECT: ()

(defun predicate (number)
  (do maybe-bind
    (if (> number 5)
        null true)
    (if (== 0 (% number 2))
        null true)
    (if (< number 0)
        null true)
    true))
;; EXPECT: ()

(predicate 3)
;; EXPECT: true
(predicate 6)
;; EXPECT: false
(predicate 4)
;; EXPECT: false
